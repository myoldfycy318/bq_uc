package com.qbao.store.controller.openPlatform;

import com.alibaba.fastjson.JSONObject;
import com.bqiong.usercenter.annotation.DefDataSource;
import com.bqiong.usercenter.annotation.Risk;
import com.bqiong.usercenter.constants.BizType;
import com.bqiong.usercenter.constants.ErrorCode;
import com.bqiong.usercenter.constants.PassportType;
import com.bqiong.usercenter.constants.UserCenterConstants;
import com.bqiong.usercenter.exception.BizException;
import com.bqiong.usercenter.httpresponse.BaseResponse;
import com.bqiong.usercenter.util.MailUtil;
import com.bqiong.usercenter.util.SMSUtils;
import com.qbao.store.controller.BaseController;
import com.qbao.store.entity.openPlatform.OpenPlatformBasicEntity;
import com.qbao.store.service.openPlatform.OpenPlatformService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

/**
 * **********************************************************
 * 内容摘要	：<p>
 * <p>
 * 作者	：94841
 * 创建时间	：2016年4月22日 下午3:48:11
 * 当前版本号：v1.0
 * 历史记录	:
 * 日期	: 2016年4月22日 下午3:48:11 	修改人：niuzan
 * 描述	:
 * **********************************************************
 */
@Controller
@RequestMapping("/open")
public class OpenVerifyCodeController extends BaseController {
    @Autowired
    private OpenPlatformService openPlatformService;

    /**
     * 函数名称 : getCode
     * 功能描述 :
     * 参数及返回值说明：
     *
     * @param passport 账号
     * @param userIp   用户ip
     * @param bizType
     * @param isInland 是否为国内邮箱，默认是
     * @return 修改记录：
     * 日期 ：2016年4月22日 下午6:06:28	修改人：
     * 描述	：
     */
    @DefDataSource
    @RequestMapping("/getCode")
    @ResponseBody
    @Risk
    public String getCode(String bizType, String passport, String userIp,
                          @RequestParam(value = "isInland", defaultValue = "0") int isInland) {
        try {
            validateIp(userIp);
            validateBizType(bizType);
            validatePassport4OpenPlatform(passport);
            PassportType type = PassportType.validatePassport(null, passport);

            switch (BizType.getFromKey(bizType)) {
                case register:
                    if (type == PassportType.mobile) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByMobile(passport);
                        if (entity != null) {
                            log.error(ErrorCode.OPEN_PASSPORT_EXIST.getMessage());
                            return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.OPEN_PASSPORT_EXIST));
                        }

                        SMSUtils.generateAndSaveVerifyCode(UserCenterConstants.DEFAULT_COUNTRY_CODE, passport, userIp, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        return JSONObject.toJSONString(BaseResponse.success());
                    }
                    if (type == PassportType.email) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByEmail(passport);
                        if (entity != null) {
                            log.error(ErrorCode.OPEN_PASSPORT_EXIST.getMessage());
                            return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.OPEN_PASSPORT_EXIST));
                        }

                        MailUtil.sendMail(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name(), isInland == 0);
                        return JSONObject.toJSONString(BaseResponse.success());
                    }
                    break;

                case resetPassword:
                    if (type == PassportType.mobile) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByMobile(passport);
                        if (entity == null) {
                            log.error(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getMessage());
                            throw new BizException(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getCode());
                        }

                        SMSUtils.generateAndSaveVerifyCode(UserCenterConstants.DEFAULT_COUNTRY_CODE, passport, userIp, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        return JSONObject.toJSONString(BaseResponse.success());
                    }
                    if (type == PassportType.email) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByEmail(passport);
                        if (entity == null) {
                            log.error(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getMessage());
                            throw new BizException(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getCode());
                        }

                        MailUtil.sendMail(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name(), isInland == 0);
                        return JSONObject.toJSONString(BaseResponse.success());
                    }
                    break;
                default:
                    break;
            }
            log.error("非法的业务类型！");
            return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
        } catch (Exception e) {
            return handleException("mobile=" + passport + ", userIp=" + userIp + ",clientId=" + UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, e);
        }
    }

    /**
     * 函数名称 : verifyCode
     * 功能描述 :
     * 参数及返回值说明：
     *
     * @param bizType
     * @param passport
     * @param userIp
     * @param code
     * @param request
     * @return 修改记录：
     * 日期 ：2016年5月10日 上午10:11:41	修改人：
     * 描述	：
     */
    @DefDataSource
    @RequestMapping("/verifyCode")
    @ResponseBody
    public String verifyCode(String bizType, String passport, String userIp, String code, HttpServletRequest request) {
        try {
            validateIp(userIp);
            validateBizType(bizType);
            validatePassport4OpenPlatform(passport);
            PassportType type = validatePassport(null, passport);

            Map<String, String> result = new HashMap<String, String>();
            switch (BizType.getFromKey(bizType)) {
                case register:
                    if (type == PassportType.mobile) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByMobile(passport);
                        if (entity != null) {
                            log.error(ErrorCode.OPEN_PASSPORT_EXIST.getMessage());
                            return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.OPEN_PASSPORT_EXIST));
                        }

                        SMSUtils.verifySmsCode(UserCenterConstants.DEFAULT_COUNTRY_CODE, passport, code, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        String smsToken = SMSUtils.cacheSmsToken(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        result.put(UserCenterConstants.VERIFY_CODE_TOKEN, smsToken);
                        return JSONObject.toJSONString(buildResponse(result));
                    }
                    if (type == PassportType.email) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByEmail(passport);
                        if (entity != null) {
                            log.error(ErrorCode.OPEN_PASSPORT_EXIST.getMessage());
                            return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.OPEN_PASSPORT_EXIST));
                        }

                        MailUtil.verifyCode(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name(), code);
                        String emailToken = MailUtil.cacheEmailToken(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        result.put(UserCenterConstants.VERIFY_CODE_TOKEN, emailToken);
                        return JSONObject.toJSONString(buildResponse(result));
                    }
                    break;

                case resetPassword:
                    if (type == PassportType.mobile) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByMobile(passport);
                        if (entity == null) {
                            log.error(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getMessage());
                            throw new BizException(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getCode());
                        }

                        SMSUtils.verifySmsCode(UserCenterConstants.DEFAULT_COUNTRY_CODE, passport, code, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        String smsToken = SMSUtils.cacheSmsToken(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        result.put(UserCenterConstants.VERIFY_CODE_TOKEN, smsToken);
                        return JSONObject.toJSONString(buildResponse(result));
                    }
                    if (type == PassportType.email) {
                        OpenPlatformBasicEntity entity = openPlatformService.queryByEmail(passport);
                        if (entity == null) {
                            log.error(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getMessage());
                            throw new BizException(ErrorCode.OPEN_PASSPORT_NOT_EXIST.getCode());
                        }

                        MailUtil.verifyCode(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name(), code);
                        String emailToken = MailUtil.cacheEmailToken(passport, UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, BizType.getFromKey(bizType).name());
                        result.put(UserCenterConstants.VERIFY_CODE_TOKEN, emailToken);
                        return JSONObject.toJSONString(buildResponse(result));
                    }
                    break;

                default:
                    break;
            }
            log.error("非法的业务类型！" + "bizType = " + bizType);
            return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
        } catch (Exception e) {
            return handleException("mobile=" + passport + ",code=" + code + ", userIp=" + userIp + ",clientId=" + UserCenterConstants.DEF_CLIENTID_4_OPEN_PLATFORM, e);
        }
    }

}
