package com.qbao.store.util;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bqiong.usercenter.constants.ErrorCode;
import com.bqiong.usercenter.constants.UserCenterConstants;
import com.bqiong.usercenter.exception.BizException;
import com.bqiong.usercenter.util.RedisUtil;
import com.bqiong.usercenter.util.aes.AESUtils;

/**
 * ********************************************************** 内容摘要 ：
 * <p>
 *
 * 作者 ：94841 创建时间 ：2016年4月13日 下午3:23:13 当前版本号：v1.0 历史记录 : 日期 : 2016年4月13日
 * 下午3:23:13 修改人：niuzan 描述 :
 ***********************************************************
 */
public class TokenUtil {
	private final static Logger log = LoggerFactory.getLogger(TokenUtil.class);
	/**
	 * accessToken的分隔符
	 */
	public static final String TOKEN_SPLITER = "|";

	/**
	 * token按照TOKEN_SPLITER分割后的数组长度
	 */
	public static final int TOKEN_SPLIT_LENGTH = 4;

	/**
	 * 
	 * 函数名称 : getAccessToken 功能描述 : 参数及返回值说明：
	 * 
	 * @param userId
	 * @param salt
	 * @return
	 *
	 *         修改记录： 日期 ：2016年4月13日 下午3:52:50 修改人： niuzan 描述 ：生成accessToken
	 * 
	 *         accesstoken格式：base64(clientId)|base64(userId)|服务器生成token的时间戳|md5(
	 *         clientId|userId|服务器生成token的时间戳|salt)
	 *
	 */
	public static String generateAccessToken(String clientId, String userId,
			String salt) {
		try {
			String timeStamp = String.valueOf(System.currentTimeMillis());
			String encUserId = URLEncoder.encode(Base64.encodeBase64URLSafeString(userId.getBytes()),"utf-8");
			String encClientId = URLEncoder.encode(Base64.encodeBase64URLSafeString(clientId.getBytes()),"utf-8");
			String original = encClientId + TOKEN_SPLITER + encUserId + TOKEN_SPLITER + timeStamp;
			String sign = MD5Util.getMD5String(original + TOKEN_SPLITER + salt);
			return original + TOKEN_SPLITER + sign;
		} catch (UnsupportedEncodingException e) {
			log.error("生成token失败，编码不支持");
			return null;
		}
	}

	/**
	 * 
	 * @param clientId
	 * @param userId
	 * @return
	 */
	public static String getCachedToken(String clientId, String userId) {
		String tokenKey = UserCenterConstants.REDIS_TOKEN_KEY_PREFIX + clientId	+ ":" + userId;
		return RedisUtil.get(tokenKey);
	}

	/**
	 * 
	 * 函数名称 : decryptToken 功能描述 : 参数及返回值说明：
	 * 
	 * @param accessToken
	 * @return
	 *
	 *         修改记录： 日期 ：2016年7月4日 下午12:08:55 修改人： 描述 ：
	 *
	 */
	public static String decryptToken(String accessToken) {
		accessToken = AESUtils.decrypt(accessToken);
		log.info("解析所得token=" + accessToken);
		return accessToken;
	}

	/**
	 * 
	 * 函数名称 : validateToken 功能描述 : 参数及返回值说明：
	 * 
	 * @param accessToken
	 * @param clientId
	 *
	 *            修改记录： 日期 ：2016年5月12日 上午10:26:13 修改人： nz 描述 ：
	 * @param isAESToken
	 *            TODO
	 * @return TODO
	 *
	 */
	public static String validateToken(String accessToken, String clientId,
			boolean isAESToken) {
		if (StringUtils.isBlank(accessToken)) {
			log.error("参数token为空");
			throw new BizException(ErrorCode.TOKEN_EXCEPTION.getCode());
		}

		if (isAESToken) {
			log.info("accessToken:{}", accessToken);
			accessToken = decryptToken(accessToken);
		}

		String tokens[] = accessToken.split("\\" + TokenUtil.TOKEN_SPLITER);
		if (tokens.length != TokenUtil.TOKEN_SPLIT_LENGTH) {
			log.error("无效的token,accessToken=" + accessToken);
			throw new BizException(ErrorCode.TOKEN_EXCEPTION.getCode());
		}
		String userId = new String(Base64.decodeBase64(tokens[UserCenterConstants.USERID_POSITION].getBytes()));
		String tokenKey = UserCenterConstants.REDIS_TOKEN_KEY_PREFIX + clientId+ ":" + userId;
		String cacheToken = RedisUtil.get(tokenKey);
		if (StringUtils.isBlank(cacheToken)) {
			log.error("token已过期,accessToken=" + accessToken);
			throw new BizException(ErrorCode.TOKEN_EXCEPTION.getCode());
		}
		if (!accessToken.equals(cacheToken)) {
			log.error("无效的token,accessToken=" + accessToken);
			throw new BizException(ErrorCode.TOKEN_EXCEPTION.getCode());
		}
		log.info("tokenKey=" + tokenKey + ",cacheToken=" + cacheToken);
		return accessToken;
	}

	public static boolean validateTokenWithoutException(String accessToken,
			String clientId, boolean isAESToken) {
		try {
			validateToken(accessToken, clientId, isAESToken);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public static Map<String, String> parseToken(String accessToken) {
		Map<String, String> map = null;
		try {
			map = new HashMap<String, String>();
			String tokens[] = accessToken.split("\\" + TokenUtil.TOKEN_SPLITER);
			String userId = new String(
					Base64.decodeBase64(tokens[UserCenterConstants.USERID_POSITION]
							.getBytes()));
			map.put(UserCenterConstants.DOME_USER_ID, userId);
		} catch (Exception e) {
			throw e;
		}
		return map;
	}

	/**
	 * 
	 * 函数名称 : validateTokenSign 功能描述 : 参数及返回值说明：
	 * 
	 * @param decryptAccessToken
	 * @param salt
	 *
	 *            修改记录： 日期 ：2016年5月4日 下午2:08:53 修改人： 描述 ：
	 *
	 */
	public static void validateTokenSign(String decryptAccessToken, String salt) {
		String original = decryptAccessToken.substring(0,
				decryptAccessToken.lastIndexOf(TOKEN_SPLITER));
		String originalSign = decryptAccessToken.substring(
				decryptAccessToken.lastIndexOf(TOKEN_SPLITER) + 1,
				decryptAccessToken.length());
		String sign = MD5Util.getMD5String(original + TOKEN_SPLITER + salt);
		if (!sign.equals(originalSign)) {
			log.error("token验签失败!decryptAccessToken=" + decryptAccessToken);
			throw new BizException(ErrorCode.TOKEN_EXCEPTION.getCode());
		}
	}

	public static boolean validateTokenSignWithoutException(
			String decryptAccessToken, String salt) {
		try {
			validateTokenSign(decryptAccessToken, salt);
			return true;
		} catch (Exception e) {
			return false;
		}

	}

	/**
	 * 
	 * 函数名称 : expireToken 功能描述 : 参数及返回值说明：
	 * 
	 * @param clientId
	 * @param userId
	 *
	 *            修改记录： 日期 ：2016年5月19日 下午4:28:43 修改人： niuzan 描述 ：
	 *
	 */
	public static void expireToken(String clientId, String userId) {
		String tokenKey = UserCenterConstants.REDIS_TOKEN_KEY_PREFIX + clientId
				+ ":" + userId;
		RedisUtil.expire(tokenKey, UserCenterConstants.TOKEN_EXPIRE_TIME);
	}

	/**
	 * 
	 * 函数名称 : destoryToken 功能描述 : 参数及返回值说明：
	 * 
	 * @param clientId
	 * @param userId
	 *
	 *            修改记录： 日期 ：2016年5月19日 下午4:29:08 修改人： niuzan 描述 ：
	 *
	 */
	public static void destoryToken(String clientId, String userId) {
		String tokenKey = UserCenterConstants.REDIS_TOKEN_KEY_PREFIX + clientId
				+ ":" + userId;
		RedisUtil.del(tokenKey);
	}

}
