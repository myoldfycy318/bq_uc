package com.qbao.store.aspect;

import java.util.HashMap;
import java.util.Map;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.alibaba.fastjson.JSONObject;
import com.bqiong.usercenter.constants.ErrorCode;
import com.bqiong.usercenter.exception.BizException;
import com.bqiong.usercenter.httpresponse.BaseResponse;
import com.qbao.store.controller.BaseController;
import com.qbao.store.service.risk.RiskService;

@Aspect
@Service("riskAspect")
public class RiskAspect extends BaseController
{
	
	private final static Logger log = LoggerFactory.getLogger(RiskAspect.class);
	
	@Autowired
	private RiskService riskService;
	
	@Pointcut("execution(* com.qbao.store.controller.user.MobileVerifyCodeController.getCode(..)) || "
			+ "execution(* com.qbao.store.controller.openPlatform.OpenVerifyCodeController.getCode(..)) ||"
			+ "execution(* com.qbao.store.controller.user.LoginController.login(..))"
			+ "execution(* com.qbao.store.controller.v2.V2UserController.login(..))")
	private void riskPointCut(){}
	
	@SuppressWarnings("unchecked")
	@Around(value = "riskPointCut()")
	public Object doAround(ProceedingJoinPoint point)
	{
		try {
			riskService.validateRisk();
			Object obj = point.proceed();
			log.info("begin resolve risk bussness！");
			BaseResponse baseResponse = JSONObject.toJavaObject(JSONObject.parseObject((String)obj), BaseResponse.class);
			ErrorCode errorCode = ErrorCode.getFromKey(baseResponse.getCode());
			if(errorCode == ErrorCode.SYSTEM_EXCEPTION)
			{
				return JSONObject.toJSONString(baseResponse);
			}
			Map<String, String> map = riskService.risk(errorCode);
			Map<String, Object> data = new HashMap<String, Object>();
			if(baseResponse.getData() != null)
			{
				data = (Map<String, Object>) baseResponse.getData();
				if(!CollectionUtils.isEmpty(map))
				{
					data.putAll(map);
				}
			}
			else
			{
				if(!CollectionUtils.isEmpty(map))
				{
					data.putAll(map);
				}
			}
			log.info("end of resolve risk bussness！risk result is=" + JSONObject.toJSONString(map));
			return JSONObject.toJSONString(BaseResponse.buildResponse(errorCode, data));
		} catch (Throwable e) {
			return doAfterThrowing(e);
		}
	}
	
	//当校验风控时就出现异常时会抛到这里来，这里做处理，其他异常都会抛到basecontroller里面处理
	private String doAfterThrowing(Throwable e)
	{
		log.info("begin resolve risk bussness after risk validation with risk valid or error occured when resovle risk！");
		if(e instanceof BizException)
		{
			ErrorCode errorCode = ErrorCode.getFromKey(((BizException)e).getErrorCode());
			Map<String, String> map = riskService.risk(errorCode);
			String response = JSONObject.toJSONString(BaseResponse.buildResponse(errorCode, map));
			log.info("接口返回数据：" + response);
			return response;
		}
		log.error(e.getMessage(), e);
		return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
	}
	
}
