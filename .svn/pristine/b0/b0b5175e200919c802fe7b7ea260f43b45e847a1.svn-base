package com.qbao.store.controller.user;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.bqiong.usercenter.constants.BUEnum;
import com.bqiong.usercenter.constants.BizType;
import com.bqiong.usercenter.constants.ErrorCode;
import com.bqiong.usercenter.constants.PassportType;
import com.bqiong.usercenter.constants.PasswordType;
import com.bqiong.usercenter.constants.UserCenterConstants;
import com.bqiong.usercenter.exception.BizException;
import com.bqiong.usercenter.httpresponse.BaseResponse;
import com.bqiong.usercenter.util.MailUtil;
import com.bqiong.usercenter.util.SMSUtils;
import com.bqiong.usercenter.util.aes.AESUtils;
import com.bqiong.usercenter.util.pbkdf2.Pbkdf2Util;
import com.qbao.store.controller.BaseController;
import com.qbao.store.entity.user.UserBasicEntity;
import com.qbao.store.service.LoginService;
import com.qbao.store.service.PasswordService;
import com.qbao.store.service.UserBasicService;
import com.qbao.store.util.MD5Util;
import com.qbao.store.util.TokenUtil;

/**
 * ********************************************************** 内容摘要 ：
 * <p>
 * <p>
 * 作者 ：94841 创建时间 ：2016年4月29日 下午2:18:48 当前版本号：v1.0 历史记录 : 日期 : 2016年4月29日
 * 下午2:18:48 修改人： 描述 :
 * **********************************************************
 */
@Controller
@RequestMapping("/user")
public class PasswordController extends BaseController {
    @Autowired
    PasswordService passwordService;

    @Autowired
    LoginService loginService;

    @Autowired
    UserBasicService userBasicService;

    /**
     * 重置web密码
     *
     * @param countryCode
     * @param passport
     * @param password
     * @param confirmPassword
     * @param token
     * @param clientId
     * @param buId
     * @return
     */
    @RequestMapping("/resetPassword4Web")
    @ResponseBody
    public String resetPassword4Web(
            @RequestParam(defaultValue = "86", required = false) String countryCode,
            @RequestParam(value = "passport", required = true) String passport,
            @RequestParam(value = "password", required = true) String password,
            @RequestParam(value = "confirmPassword", required = true) String confirmPassword,
            @RequestParam(value = "token", required = true) String token,
            @RequestParam(value = "clientId", required = false) String clientId,
            @RequestParam(value = "buId", required = true) String buId) {
        try {
            validateBuId(buId);
            // 请求来源是app_store时候，没有clientid，使用buId标识
            if (StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK) {
                clientId = buId;
            } else {
                validateClientId(clientId);
            }

            PassportType type = validatePassport(countryCode, passport);
            if (type == PassportType.mobile) {
                SMSUtils.validateSmsToken(passport, token, clientId, BizType.resetPassword.name());
            }
            if (type == PassportType.email) {
                MailUtil.validateEmailToken(passport, token, clientId, BizType.resetPassword.name());
            }
            validatePassword(password, isAESContent(BUEnum.getFromKey(buId)));
            UserBasicEntity entity = passwordService.resetPassword(countryCode, passport, password, type);

            if (entity == null) {
                log.error("重置密码失败,mobile:{},smsToken:{},buId:{},clientId:{}", passport, token, buId, clientId);
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            TokenUtil.destoryToken(clientId, entity.getUserId());
            return JSONObject.toJSONString(BaseResponse.success());
        } catch (Exception e) {
            return handleException("", e);
        }
    }

    /**
     * 函数名称 : findPassword 功能描述 : 参数及返回值说明：
     *
     * @param countryCode TODO
     * @param mobile
     * @param password
     * @param clientId
     * @param buId
     * @param bizType
     * @return 修改记录： 日期 ：2016年4月29日 下午3:04:48 修改人： 描述 ：
     */
    @RequestMapping("/resetPassword")
    @ResponseBody
    public String resetPassword(
            @RequestParam(defaultValue = "86", required = false) String countryCode,
            @RequestParam(value = "mobile", required = true) String mobile,
            @RequestParam(value = "password", required = true) String password,
            @RequestParam(value = "smsToken", required = true) String smsToken,
            @RequestParam(value = "clientId", required = false) String clientId,
            @RequestParam(value = "buId", required = true) String buId) {
        try {
            validateBuId(buId);
            // 请求来源是app_store时候，没有clientid，使用buId标识
            if (StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK) {
                clientId = buId;
            } else {
                validateClientId(clientId);
            }
            PassportType type = validatePassport(countryCode, mobile);
            if (type != PassportType.mobile) {
                log.error("参数mobile类型错误, passport:{}", mobile);
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.PASSPORT_ILLEGLE));
            }

            SMSUtils.validateSmsToken(mobile, smsToken, clientId, BizType.resetPassword.name());

            validatePassword(password, isAESContent(BUEnum.getFromKey(buId)));
            UserBasicEntity entity = passwordService.resetPassword(countryCode, mobile, password, type);
            if (entity == null) {
                log.error("重置密码失败" + ",mobile=" + mobile + ",smsToken =" + smsToken + ",buId=" + buId + ",clientId=" + clientId);
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            TokenUtil.destoryToken(clientId, entity.getUserId());
            return JSONObject.toJSONString(BaseResponse.success());
        } catch (Exception e) {
            return handleException("mobile=" + mobile + ",password=" + password + ",buId=" + buId + ",clientId=" + clientId, e);
        }
    }

    /**
     * @param email
     * @param password
     * @param emailToken
     * @param clientId
     * @param buId
     * @param request
     * @return
     */
    @RequestMapping("/resetPasswordEmail")
    @ResponseBody
    public String resetPasswordEmail(
            @RequestParam(value = "email", required = true) String email,
            @RequestParam(value = "password", required = true) String password,
            @RequestParam(value = "emailToken", required = true) String emailToken,
            @RequestParam(value = "clientId", required = false) String clientId,
            @RequestParam(value = "buId", required = true) String buId,
            HttpServletRequest request) {
        try {
            validateBuId(buId);
            // 请求来源是app_store时候，没有clientid，使用buId标识
            if (StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK) {
                clientId = buId;
            } else {
                validateClientId(clientId);
            }

            PassportType type = validatePassport(null, email);
            if (type != PassportType.email) {
                log.error("参数mobile类型错误, passport = " + email);
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.PASSPORT_ILLEGLE));
            }

            MailUtil.validateEmailToken(email, emailToken, clientId, BizType.resetPassword.name());
            validatePassword(password, isAESContent(BUEnum.getFromKey(buId)));
            log.info("pwd:{}", password);
            UserBasicEntity entity = passwordService.resetPassword(null, email, password, type);

            if (entity == null) {
                log.error("重置密码失败" + ",mobile=" + email + ",smsToken =" + emailToken + ",buId=" + buId + ",clientId=" + clientId);
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            TokenUtil.destoryToken(clientId, entity.getUserId());
            return JSONObject.toJSONString(BaseResponse.success());
        } catch (Exception e) {
            return handleException("mobile=" + email + ",password=" + password + ",buId=" + buId + ",clientId=" + clientId, e);
        }
    }

    /**
     * 函数名称 : checkOldPwd 功能描述 : 参数及返回值说明：
     *
     * @param clientId
     * @param buId
     * @return 修改记录： 日期 ：2016年5月4日 上午10:08:28 修改人： 描述 ：
     */
    @RequestMapping("/modifyPassword")
    @ResponseBody
    public String modifyPassword(
            @RequestParam(value = "accessToken", required = true) String accessToken,
            @RequestParam(value = "passwordOld", required = true) String passwordOld,
            @RequestParam(value = "passwordNew", required = true) String passwordNew,
            @RequestParam(value = "clientId", required = false) String clientId,
            @RequestParam(value = "buId", required = true) String buId) {

        log.info("accessToken:{}", accessToken);
        try {
            validateBuId(buId);
            // 请求来源是app_store时候，没有clientid，使用buId标识
            if (StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK) {
                clientId = buId;
            } else {
                validateClientId(clientId);
            }
//			accessToken = TokenUtil.validateToken(accessToken, clientId,isAESContent(BUEnum.getFromKey(buId)));
            Map<String, String> tokenMap = TokenUtil.parseToken(accessToken);
            String userId = tokenMap.get(UserCenterConstants.DOME_USER_ID);
            UserBasicEntity user = userBasicService.queryById(userId);
            if (user == null) {
                log.error("用户不存在-> userId:{}", userId);
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.USER_NOT_EXIST));
            }
            log.info("查询所得用户信息user:{}", JSONObject.toJSONString(user));
            TokenUtil.validateTokenSign(accessToken, user.getSalt());
            validatePasswordWithType(passwordOld, PasswordType._old, isAESContent(BUEnum.getFromKey(buId)));
            validatePasswordWithType(passwordNew, PasswordType._new, isAESContent(BUEnum.getFromKey(buId)));
            //数据库密码
            String _password = user.getPassword();
            //加盐
            String salt = user.getSalt();
            String md5Password = MD5Util.getMD5String(passwordOld + salt);
            String pbkdf2Password = Pbkdf2Util.encrypt(AESUtils.decrypt(passwordOld), salt);
            if (!_password.equals(md5Password) && !_password.equals(pbkdf2Password)) {
                throw new BizException(ErrorCode.PASSWORD_WRONG.getCode(), ErrorCode.PASSWORD_WRONG.getMessage());
            }
            if (passwordNew.equals(passwordOld)) {
                log.error(ErrorCode.SAME_WITH_OLD_PWD.getMessage());
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SAME_WITH_OLD_PWD));
            }
            PassportType type = null;
            String passport = "";
            if (user.getEmail() != null) {
                type = PassportType.email;
                passport = user.getEmail();
            } else if (user.getMobile() != null && !user.getMobile().startsWith("100")) {
                type = PassportType.mobile;
                passport = user.getMobile();
            } else {
                log.error("账号异常->即非手机又非邮箱");
                throw new BizException(ErrorCode.SYSTEM_EXCEPTION.getCode());
            }
            log.info("账号类型->type:{}", type.name());
            UserBasicEntity entity = passwordService.resetPassword(user.getCountryCode(), passport, passwordNew, type);
            if (entity == null) {
                log.error("修改密码失败！");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            TokenUtil.destoryToken(clientId, entity.getUserId());
            return JSONObject.toJSONString(BaseResponse.success());
        } catch (Exception e) {
            if (e instanceof BizException && ErrorCode.PASSWORD_WRONG == ErrorCode.getFromKey(((BizException) e).getErrorCode())) {
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.OLD_PWD_ERROR));
            }
            return handleException("accesstoken=" + accessToken + ",buId=" + buId + ",clientId=" + clientId, e);
        }
    }

}
