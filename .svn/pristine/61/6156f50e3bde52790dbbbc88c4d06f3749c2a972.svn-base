package com.qbao.store.controller.user;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.bqiong.usercenter.constants.BUEnum;
import com.bqiong.usercenter.constants.ErrorCode;
import com.bqiong.usercenter.constants.UserCenterConstants;
import com.bqiong.usercenter.httpresponse.BaseResponse;
import com.qbao.store.controller.BaseController;
import com.qbao.store.entity.user.UserBasicEntity;
import com.qbao.store.entity.user.UserDetailEntity;
import com.qbao.store.huanxin.service.impl.TalkDataServiceImpl;
import com.qbao.store.service.UserBasicService;
import com.qbao.store.service.UserDetailService;
import com.qbao.store.util.TokenUtil;

/**
 * **********************************************************
 *  内容摘要	：<p>
 *
 *  作者	：94841
 *  创建时间	：2016年4月29日 下午2:18:48 
 *  当前版本号：v1.0
 *  历史记录	:
 *  	日期	: 2016年4月29日 下午2:18:48 	修改人：
 *  	描述	:
 ***********************************************************
 */
@Controller
@RequestMapping("/user")
public class UserDetailModifyController extends BaseController
{
    @Autowired
    private UserBasicService userBasicService;
    
    @Autowired
    UserDetailService userDetailService;
    
    TalkDataServiceImpl huanXinService = TalkDataServiceImpl.getInstance();
	
	/**
	 * 
	 *  函数名称 : getDetailByToken
	 *  功能描述 :  
	 *  参数及返回值说明：
	 *  	@param accessToken
	 *  	@param clientId
	 *  	@param buId
	 *  	@param avatarUrl
	 *  	@return
	 *
	 *  修改记录：
	 *  	日期 ：2016年5月20日 上午11:55:43	修改人：  niuzan
	 *  	描述	：
	 *
	 */
	@RequestMapping("/modAvatar")
    @ResponseBody
    public String modAvatar(String accessToken, String clientId, String buId, String avatarUrl, HttpServletRequest request)
    {
        try 
        {
            if(StringUtils.isBlank(avatarUrl))
            {
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.AVATAR_PARAM_NULL));
            }
            validateBuId(buId);
            //请求来源是app_store时候，没有clientid，使用buId标识
            if(StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK)
            {
                clientId = buId;
            }
            else if(BUEnum.getFromKey(buId) == BUEnum.DOME_SDK)
            {
                validateClientId(clientId);
            }
            accessToken = TokenUtil.validateToken(accessToken, clientId, isAESContent(BUEnum.getFromKey(buId)));
            Map<String, String> tokenMap = TokenUtil.parseToken(accessToken);
            String userId = tokenMap.get(UserCenterConstants.DOME_USER_ID);
            UserBasicEntity userBasic = userBasicService.queryById(userId);
            if(userBasic == null)
            {
                log.error("用户基本信息不存在,修改头像失败!");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户基本信息userBasic=" + userBasic);
            
            UserDetailEntity userDetail = userDetailService.queryById(userId);
            if(userDetail == null)
            {
                log.error("用户详细信息不存在,数据可能存在不一致！");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户信息userDetail=" + userDetail);
            
            TokenUtil.validateTokenSign(accessToken, userBasic.getSalt());
            
            if(StringUtils.equals(avatarUrl, userDetail.getAvatar()))
            {
                return JSONObject.toJSONString(BaseResponse.success());
            }
            
            UserDetailEntity detailEntity = new UserDetailEntity(userId);
            detailEntity.setAvatar(avatarUrl);
            userDetailService.update(detailEntity);
            return JSONObject.toJSONString(BaseResponse.success());
        }catch(Exception e)
        {
            return handleException("token="+ accessToken + ",clientId=" + clientId + ",buId=" + buId, e);
        }
    }
	
	
	@RequestMapping("/modGender")
    @ResponseBody
    public String modGender(String accessToken, String clientId, String buId, String gender, HttpServletRequest request)
    {
        try 
        {
            validateGender(gender);
            validateBuId(buId);
            //请求来源是app_store时候，没有clientid，使用buId标识
            if(StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK)
            {
                clientId = buId;
            }
            else if(BUEnum.getFromKey(buId) == BUEnum.DOME_SDK)
            {
                validateClientId(clientId);
            }
            accessToken = TokenUtil.validateToken(accessToken, clientId, isAESContent(BUEnum.getFromKey(buId)));
            Map<String, String> tokenMap = TokenUtil.parseToken(accessToken);
            String userId = tokenMap.get(UserCenterConstants.DOME_USER_ID);
            UserBasicEntity userBasic = userBasicService.queryById(userId);
            if(userBasic == null)
            {
                log.error("用户基本信息不存在,修改性别失败!");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户基本信息userBasic=" + userBasic);
            
            UserDetailEntity userDetail = userDetailService.queryById(userId);
            if(userDetail == null)
            {
                log.error("用户详细信息不存在,数据可能存在不一致！");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户信息userDetail=" + userDetail);
            
            TokenUtil.validateTokenSign(accessToken, userBasic.getSalt());
            
            if(StringUtils.equals(gender, userDetail.getGender()))
            {
                return JSONObject.toJSONString(BaseResponse.success());
            }
            
            UserDetailEntity detailEntity = new UserDetailEntity(userId);
            detailEntity.setGender(gender);
            userDetailService.update(detailEntity);
            return JSONObject.toJSONString(BaseResponse.success());
        }catch(Exception e)
        {
            return handleException("token="+ accessToken + ",clientId=" + clientId + ",buId=" + buId, e);
        }
    }
	
	@RequestMapping("/modAge")
    @ResponseBody
    public String modAge(String accessToken, String clientId, String buId, @RequestParam("age")Integer age, HttpServletRequest request)
    {
        try 
        {
            validateBuId(buId);
            //请求来源是app_store时候，没有clientid，使用buId标识
            if(StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK)
            {
                clientId = buId;
            }
            else if(BUEnum.getFromKey(buId) == BUEnum.DOME_SDK)
            {
                validateClientId(clientId);
            }
            accessToken = TokenUtil.validateToken(accessToken, clientId, isAESContent(BUEnum.getFromKey(buId)));
            Map<String, String> tokenMap = TokenUtil.parseToken(accessToken);
            String userId = tokenMap.get(UserCenterConstants.DOME_USER_ID);
            UserBasicEntity userBasic = userBasicService.queryById(userId);
            if(userBasic == null)
            {
                log.error("用户基本信息不存在,修改性别失败!");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户基本信息userBasic=" + userBasic);
            
            UserDetailEntity userDetail = userDetailService.queryById(userId);
            if(userDetail == null)
            {
                log.error("用户详细信息不存在,数据可能存在不一致！");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户信息userDetail=" + userDetail);
            
            TokenUtil.validateTokenSign(accessToken, userBasic.getSalt());
            
            if(age == userDetail.getAge())
            {
                return JSONObject.toJSONString(BaseResponse.success());
            }
            
            UserDetailEntity detailEntity = new UserDetailEntity(userId);
            detailEntity.setAge(age);
            userDetailService.update(detailEntity);
            return JSONObject.toJSONString(BaseResponse.success());
        }catch(Exception e)
        {
            return handleException("token="+ accessToken + ",clientId=" + clientId + ",buId=" + buId, e);
        }
    }
	
	@RequestMapping("/modUserName")
    @ResponseBody
    public String modUserName(String accessToken, String clientId, String buId, String userName, HttpServletRequest request)
    {
        try 
        {
            validateUserName(userName);
            validateBuId(buId);
            //请求来源是app_store时候，没有clientid，使用buId标识
            if(StringUtils.isBlank(clientId) && BUEnum.getFromKey(buId) != BUEnum.DOME_SDK)
            {
                clientId = buId;
            }
            else if(BUEnum.getFromKey(buId) == BUEnum.DOME_SDK)
            {
                validateClientId(clientId);
            }
            accessToken = TokenUtil.validateToken(accessToken, clientId, isAESContent(BUEnum.getFromKey(buId)));
            Map<String, String> tokenMap = TokenUtil.parseToken(accessToken);
            String userId = tokenMap.get(UserCenterConstants.DOME_USER_ID);
            UserBasicEntity userBasic = userBasicService.queryById(userId);
            if(userBasic == null)
            {
                log.error("用户基本信息不存在,修改昵称失败!");
                return JSONObject.toJSONString(BaseResponse.fail(ErrorCode.SYSTEM_EXCEPTION));
            }
            log.info("查询所得用户基本信息userBasic=" + userBasic);
            
            TokenUtil.validateTokenSign(accessToken, userBasic.getSalt());
            
            UserBasicEntity basicEntity = new UserBasicEntity();
            basicEntity.setUserId(userBasic.getUserId());
            basicEntity.setUserName(userName);
            userBasicService.update(basicEntity);
            //修改环信昵称
            try{
            	huanXinService.userModifyNickname(userBasic.getUserId(), userName);
            }catch(Exception e){
            	log.info("修改环信昵称发生异常:"+userBasic.getUserId());
            	e.printStackTrace();
            }
            return JSONObject.toJSONString(BaseResponse.success());
        }catch(Exception e)
        {
            return handleException("token="+ accessToken + ",clientId=" + clientId + ",buId=" + buId+",userName=" + userName, e);
        }
    }
}
