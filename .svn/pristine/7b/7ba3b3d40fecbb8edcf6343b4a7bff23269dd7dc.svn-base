package com.qbao.store.service.impl;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONObject;
import com.bqiong.usercenter.constants.ErrorCode;
import com.bqiong.usercenter.constants.GenderEnum;
import com.bqiong.usercenter.constants.PassportType;
import com.bqiong.usercenter.constants.UserCenterConstants;
import com.bqiong.usercenter.exception.BizException;
import com.bqiong.usercenter.util.RandomStringUtil;
import com.qbao.store.entity.index.EmailIndexEntity;
import com.qbao.store.entity.index.MobileIndexEntity;
import com.qbao.store.entity.openPlatform.OpenPlatformBasicEntity;
import com.qbao.store.entity.user.UserBasicEntity;
import com.qbao.store.entity.user.UserDetailEntity;
import com.qbao.store.service.RegisterService;
import com.qbao.store.service.UserBasicService;
import com.qbao.store.service.UserDetailService;
import com.qbao.store.service.UserRegisterExtraService;
import com.qbao.store.service.index.EmailIndexService;
import com.qbao.store.service.index.MobileIndexService;
import com.qbao.store.service.openPlatform.OpenPlatformService;
import com.qbao.store.util.CommonUtil;
import com.qbao.store.util.MD5Util;
import com.qbao.store.util.UserIdGenerator;

/**
 * **********************************************************
 *  内容摘要	：<p>
 *
 *  作者	：94841
 *  创建时间	：2016年4月20日 下午12:14:30 
 *  当前版本号：v1.0
 *  历史记录	:
 *  	日期	: 2016年4月20日 下午12:14:30 	修改人：niuzan
 *  	描述	:
 ***********************************************************
 */
@Service("RegisterService")
public class RegisterServiceImpl implements RegisterService
{
	private final Logger log = LoggerFactory.getLogger(getClass());
	
	@Autowired
	UserBasicService userBasicService;
	
	@Autowired
	UserDetailService userDetailService;
	
	@Autowired
	OpenPlatformService openPlatformService;
	
	@Autowired
	MobileIndexService mobileIndexService;
	
	@Autowired
	EmailIndexService emailIndexService;
	
	@Autowired
	UserIdGenerator userIdGenerator;
	
	@Autowired
	UserRegisterExtraService userRegisterExtraService;

	/**
	 * 
	 *  函数名称 ：register
	 *  功能描述 ：  
	 *  参数说明 ：
	 * @param passport
	 * @param password
	 *  	@return
	 *  返回值：
	 *  	
	 *  修改记录：
	 *  日期 ：2016年4月20日 下午12:14:37	修改人：  niuzan
	 *  描述 ：
	 * @throws Exception 
	 *
	 */
	@Transactional
	@Override
	public UserBasicEntity register(String countryCode, String passport, String password, String gender, 
			String buId, String avatarUrl, String channelId,String clientId) throws Exception
	{
		PassportType type = PassportType.validatePassport(countryCode, passport);
		
		String userId = "";
		if(PassportType.mobile == type)
		{
			MobileIndexEntity entity = mobileIndexService.queryByMobile(countryCode, passport);
			if(entity != null)
			{
				log.error("该账号已存在，mobile="+ passport);
				throw new BizException(ErrorCode.PASSPORT_EXIST.getCode(), ErrorCode.PASSPORT_EXIST.getMessage());
			}
			MobileIndexEntity indexEntity = mobileIndexService.insert(countryCode, passport);
			userId = indexEntity.getUserId();
			if(indexEntity == null || StringUtils.isBlank(userId))
			{
				log.error("索引表入库结果查询失败，mobile = " + passport + ", mobileIndexEntity=" + indexEntity == null? 
						null : JSONObject.toJSONString(indexEntity));
				return null;
			}
		}
		if(PassportType.email == type)
		{
			EmailIndexEntity entity = emailIndexService.queryByEmail(passport);
			if(entity != null)
			{
				log.error("该账号已存在，mobile="+ passport);
				throw new BizException(ErrorCode.PASSPORT_EXIST.getCode(), ErrorCode.PASSPORT_EXIST.getMessage());
			}
			EmailIndexEntity indexEntity = emailIndexService.insert(passport);
			userId = indexEntity.getUserId();
			if(indexEntity == null || StringUtils.isBlank(userId))
			{
				log.error("索引表入库结果查询失败，mobile = " + passport + ", emailIndexEntity=" + indexEntity == null? 
						null : JSONObject.toJSONString(indexEntity));
				return null;
			}
		}
		
		String salt = RandomStringUtil.generateSalt();
		String userName = RandomStringUtil.generateName();
		//String userName = mobile;
		String encPassword = MD5Util.getMD5String(password + salt);
		log.info("-x-:{}",encPassword);
		
		if(StringUtils.isBlank(salt) || StringUtils.isBlank(userName) || StringUtils.isBlank(encPassword))
		{
			log.error("注册生成字段失败，salt=" + salt + ",userName=" + userName + ",encPassword=" + encPassword);
			return null;
		}
		UserBasicEntity userBasicEntity = buildUserBasicEntity(userId, userName, countryCode, passport, encPassword, salt, buId);
		//设置注册方式，用于判断后续绑定
		userBasicEntity.setRegisterBy(type.name());
		userBasicEntity.setClientId(clientId);
		
		UserBasicEntity basicEntity = userBasicService.insert(userBasicEntity);
		
		if(basicEntity == null)
		{
			log.error("基本表中数据添加成功，但查询结果为空，userId = " + userId + ", mobile = " + passport);
			return null;
		}
		
		//向详细表中添加数据
		UserDetailEntity insertEntity = new UserDetailEntity(userId);
		//注册接口接收头像和性别参数,头像直接入库，不做非空判断
		insertEntity.setAvatar(avatarUrl);
		if(StringUtils.isBlank(gender) || GenderEnum.getFromKey(gender) == null)
		{
			insertEntity.setGender(GenderEnum.N.name());
		}
		else
		{
			insertEntity.setGender(GenderEnum.getFromKey(gender).name());
		}
		UserDetailEntity detailEntity = userDetailService.insert(insertEntity);
		if(detailEntity == null)
		{
			log.error("详细表中数据添加成功，但查询结果为空，userId = " + userId + ", mobile = " + passport);
			return null;
		}
		//添加注册渠道
		if(StringUtils.isNotBlank(channelId))
		{
			userRegisterExtraService.addRegisterExtra(userId, channelId);
		}
		return basicEntity;
	}
	
	
	/**
	 * 
	 *  函数名称 ：register4OpenPlatform
	 *  功能描述 ：  
	 *  参数说明 ：
	 *  	@param passport
	 * @param password
	 *  	@return
	 *  	@throws Exception
	 *  返回值：
	 *  	
	 *  修改记录：
	 *  日期 ：2016年5月9日 下午4:39:55	修改人：  
	 *  描述 ：
	 *
	 */
	@Override
	public OpenPlatformBasicEntity register4OpenPlatform(String passport, String password) throws Exception 
	{
		PassportType passportType = PassportType.validatePassport(null, passport);
		OpenPlatformBasicEntity entity = null;
		if(PassportType.mobile == passportType)
		{
			entity = openPlatformService.queryByMobile(passport);
		}
		else if(PassportType.email == passportType)
		{
			entity = openPlatformService.queryByEmail(passport);
		}
		if(entity != null)
		{
			log.error(ErrorCode.PASSPORT_EXIST.getMessage());
			throw new BizException(ErrorCode.PASSPORT_EXIST.getCode());
		}
		//因为有导入数据，可能出现主键重复。
		String userId = null;
		try 
		{
			userId = userIdGenerator.generateOpenUserId();
		} catch (Exception e) 
		{
			log.error(e + "生成用户id失败,请检查序列表数据！");
			throw new BizException(ErrorCode.SYSTEM_EXCEPTION.getCode());
		}
		if(StringUtils.isBlank(userId))
		{
			log.error("生成用户id为空！");
			throw new BizException(ErrorCode.SYSTEM_EXCEPTION.getCode());
		}
		while(openPlatformService.queryById(userId) != null)
		{
			userId = userIdGenerator.generateOpenUserId();
		}
		String salt = RandomStringUtil.generateSalt();
		String userName = RandomStringUtil.generateName();
		//String userName = passport;
		String encPassword = MD5Util.getMD5String(password + salt);
		OpenPlatformBasicEntity basicEntity = buildOpenPlatformUserEntity(userId, userName, passport, encPassword, salt);
		return openPlatformService.insert(basicEntity);
	}
	
	
	/**
	 * 
	 *  函数名称 : buildEntity
	 *  功能描述 :  
	 *  参数及返回值说明：
	 * @param userId TODO
	 * @param userName TODO
	 * @param countryCode TODO
	 * @param passport
	 * @param password
	 * @param salt
	 * @return
	 *
	 *  修改记录：
	 *  	日期 ：2016年4月13日 下午5:31:43	修改人：  niuzan
	 *  	描述	：
	 *
	 */
	private UserBasicEntity buildUserBasicEntity(String userId, String userName, String countryCode, String passport, String password, String salt, String buId) 
	{
		return CommonUtil.buildUserBasicEntity(userId, userName, countryCode, passport, password, UserCenterConstants.NORMAL, salt, buId);
	}
	
	/**
	 * 
	 *  函数名称 : buildOpenPlatformUserEntity
	 *  功能描述 :  
	 *  参数及返回值说明：
	 *  	@param userId
	 *  	@param userName
	 *  	@param passport
	 *  	@param password
	 *  	@param salt
	 *  	@return
	 *
	 *  修改记录：
	 *  	日期 ：2016年5月19日 下午5:40:03	修改人：  
	 *  	描述	：
	 *
	 */
	private OpenPlatformBasicEntity buildOpenPlatformUserEntity(String userId, String userName, String passport, String password, String salt) 
	{
		return CommonUtil.buildOpenPlatformUserBasicEntity(userId, userName, passport, password, UserCenterConstants.NORMAL, salt);
	}
}
